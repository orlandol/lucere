========================================
= Lucere Design Spec by Orlando Llanes =
=                      Updated 9/25/23 =
========================================

Purpose: Provide a stable foundation for games and multimedia software.

Funding: Commercial projects. Consulting. Donations.

License: Always permissive Open Source.

Design goals:
- Follow best practices to achieve commercial quality.
- Provide a conceptual and uniform abstraction.
- Provide a thin layer on top of the operating system and its subsystems.
- Implement various subsystems which can be selected at runtime.
- Provide access to the internals to extend subsystems.
- Provide bridges between dependant subsystems.
- Choose accelerated and optimal subsystems at runtime.
- Check for errors throughout.
- Invert dependencies for dead code elimination.
- Minimize dependencies between unrelated subsystems for modularity.
- Graphics modes where 2D and 3D can coexist.
- Structure build project to "just work".
- Design for forward and backward compatibility.

============================
= Windows Graphics Systems =
============================
Software
Win32 GDI
OpenGL 4
OpenGL 3
OpenGL 2
Vulkan
DirectX 12
Direct3D 11
Direct3D 10
Direct3D 9
Direct3D 8
DirectX 7
DirectX 5
WinG

========================
= Mac Graphics Systems =
========================
Software
Metal
OpenGL 4
OpenGL 3
OpenGL 2

==========================
= Linux Graphics Systems =
==========================
Software
Vulkan
OpenGL 4
OpenGL 3
OpenGL 2
Framebuffer
Wayland
Mir(?)
X Windows

===========================
= MS-DOS Graphics Systems =
===========================
Software
VBE 2
VBE 1.2
Mode 13h
EGA
CGA

=========================
= Application Interface =
=========================

#include "lucere.h"

typedef struct LucAppImpl LucApp;

typedef struct LucEventImpl {
  size_t structSize; // = sizeof(LucEvent)

  unsigned what;
  unsigned key;
} LucEvent;

LucApp* lucCreateApp( const char* title, unsigned width, unsigned height,
    unsigned flags, LucEventRouter eventRouter );

unsigned lucReleaseApp( LucApp** appPointer );

unsigned lucAppIsRunning( LucApp* app );

unsigned lucExitApp( LucApp* app, unsigned returnCode );

unsigned lucRouteEvents( LucApp* app );

unsigned lucWaitForNextEvent( LucApp* app );

===============================
= Win32 Application Interface =
===============================

#include "lucimpl.h"

typedef struct LucApp {
  size_t structSize; // == sizeof(LucApp)

  HWND window;
  HINSTANCE instance;
} LucApp;

typedef struct LucEventImpl {
  size_t structSize; // = sizeof(LucEvent)

  unsigned what;
  unsigned key;

  MSG sysmsg;
} LucEventImpl;

LucApp* lucCreateApp( const char* title, unsigned width, unsigned height,
        unsigned flags, LucEventRouter eventRouter );

unsigned lucReleaseApp( LucApp** appPointer );

unsigned lucExitApp( unsigned returnCode );

unsigned lucRouteEvents( LucApp* app );

unsigned lucWaitForNextEvent( LucApp* app );

======================
= Graphics Hierarchy =
======================

LucApp = [System]App
|
-> LucDisplay = [System]Display1, ..., [System]DisplayN
   |
   -> LucCanvas = [System]Canvas1, ..., [System]CanvasN
      |
      -> LucSurface
      |
      -> LucImage = [System]Image1, ..., [System]ImageN
      |  |
      |  -> LucSurface
      |
      -> LucMask = [System]Mask1, ..., [System]MaskN
         |
         -> LucSurface

======================
= Graphics Interface =
======================

#include "lucere.h"

typedef struct LucGraphicsSystemImpl LucGraphicsSystem;

#include "lucimpl.h"

typedef struct LucGraphicsSystemImpl {
  LucCreateDisplayFunc createDisplay;

  // Display interface
  LucReleaseDisplayFunc releaseDisplay;

  LucCenterCanvasFunc centerCanvas;
  LucFitCanvasHFunc fitCanvasH;
  LucFitCanvasVFunc fitCanvasV;
  LucStretchCanvasFunc stretchCanvas;

  LucCreateCanvasFunc createCanvas;

  // Canvas interface
  LucReleaseCanvasFunc releaseCanvas;

  LucCanvasSurfaceType canvasSurfaceType;
  LucAccessCanvasSurfaceFunc accessCanvasSurface;
  LucReleaseCanvasSurfaceFunc releaseCanvasSurface;

  // Image interface
  LucReleaseImageFunc releaseImage;

  LucImageSurfaceTypeFunc imageSurfaceType;
  LucImageAccessSurfaceFunc accessImageSurface;
  LucImageReleaseSurfaceFunc releaseImageSurface;

  // Surface interface
} LucGraphicsSystemImpl;

=====================
= Display Interface =
=====================

#include "lucere.h"

typedef struct LucDisplayImpl LucDisplay;

#include "lucimpl.h"

typedef struct LucDisplayImpl {
  size_t structSize; // = sizeof(LucDisplay)

  LucReleaseDisplayFunc releaseDisplay;
  LucCenterCanvasFunc centerCanvas;
  LucFitCanvasHFunc fitCanvasH;
  LucFitCanvasVFunc fitCanvasV;
  LucStretchCanvasFunc stretchCanvas;
} LucDisplayImpl;

#include "lucere.h"

unsigned lucDisplayCount( LucApp* app );

LucDisplay* lucCreateDisplay( LucApp* app, unsigned monitorIndex,
  LucGraphicsSystem* graphics );

unsigned lucReleaseDisplay( LucDisplay** displayPtr );

unsigned lucCenterCanvas( LucDisplay* display, LucCanvas* canvas );

unsigned lucFitCanvasH( LucDisplay* display, LucCanvas* canvas );

unsigned lucFitCanvasV( LucDisplay* display, LucCanvas* canvas );

unsigned lucStretchCanvas( LucDisplay* display, LucCanvas* canvas );

unsigned lucSetDrawCanvasMode( LucDisplay* display, unsigned drawCanvasMode );

unsigned lucDrawCanvas( LucDisplay* display, LucCanvas* canvas );

===============================
= Win32 GDI Display Interface =
===============================

#include "lucimpl.h"

typedef struct Win32GdiDisplay {
  size_t structSize; // = sizeof(Win32GdiDisplay)

  ...

  HBITMAP dibSection;
} Win32GdiDisplay;

unsigned gdiDisplayCount( LucApp* app );

LucDisplay* gdiCreateDisplay( LucApp* app, unsigned monitorIndex,
  LucGraphicsInterface* graphicsSystem );

unsigned gdiReleaseDisplay( LucDisplay** displayPtr );

unsigned gdiReleaseDisplay( LucDisplay** displayPtr );

unsigned gdiCenterCanvas( LucDisplay* display, LucCanvas* canvas );

unsigned gdiFitCanvasH( LucDisplay* display, LucCanvas* canvas );

unsigned gdiFitCanvasV( LucDisplay* display, LucCanvas* canvas );

unsigned gdiStretchCanvas( LucDisplay* display, LucCanvas* canvas );

====================
= Canvas Interface =
====================

#include "lucere.h"

typedef struct LucCanvasImpl LucCanvas;

#include "lucimpl.h"

typedef struct LucCanvasImpl {
  size_t structSize; // = sizeof(LucCanvas)

  LucClearFunc clear;

  // Canvas primitives
  LucPixelAtFunc pixelAt;
  LucDrawPixelFunc drawPixel;
  LucBlendPixelFunc blendPixel;

  LucDrawCircleFunc drawCircle;
  LucBlendCircleFunc blendCircle;
  LucFillCircleFunc fillCircle;
  LucBlendfillCircleFunc blendfillCircle;

  LucDrawEllipseFunc drawEllipse;
  LucFillEllipseFunc fillEllipse;
  LucBlendEllipseFunc blendEllipse;
  LucBlendfillEllipseFunc blendfillEllipse;

  LucDrawRectFunc drawRect;
  LucFillRectFunc fillRect;
  LucBlendRectFunc blendRect;
  LucBlendfillRectFunc blendfillRect;

  LucDrawPolyFunc drawPoly;
  LucFillPolyFunc fillPoly;
  LucBlendPolyFunc blendPoly;
  LucBlendfillPolyFunc blendfillPoly;

  // Canvas blitters
  LucDrawImageFunc drawImage;
  LucDrawImageRSFunc drawImageRS;

  LucTransImageFunc transImage;
  LucTransImageRSFunc transImageRS;

  LucBlendImageFunc blendImage;
  LucBlendImageRSFunc blendImageRS;

  LucDrawRLE0Func drawRLE0;
  LucDrawRLE0RSFunc drawRLE0RS;

  LucTransRLE0Func transRLE0;
  LucTransRLE0RSFunc transRLE0RS;

  LucBlendRLE0Func blendRLE0;
  LucBlendRLE0RSFunc blendRLE0RS;

  LucDrawMaskFunc drawMask;
  LucDrawMaskRSFunc drawMaskRS;

  LucTransMaskFunc transMask;
  LucTransMaskRSFunc transMaskRS;

  LucBlendMaskFunc blendMask;
  LucBlendMaskRSFunc blendMaskRS;
} LucCanvasImpl;

#include "lucere.h"

unsigned lucClearCanvas( LucCanvas* canvas, unsigned color );

// Canvas primitives
unsigned lucPixelAt( LucCanvas* canvas, int x, int y );

unsigned lucDrawPixel( LucCanvas* canvas, int x, int y,
  unsigned color );

unsigned lucBlendPixel( LucCanvas* canvas, int x, int y,
  unsigned color );

unsigned lucDrawCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned lucFillCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned lucBlendCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned lucBlendfillCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned lucDrawEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, unsigned vradius, unsigned color );

unsigned lucFillEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, unsigned vradius, unsigned color );

unsigned lucBlendEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, int vradius, unsigned color );

unsigned lucBlendfillEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, int vradius, unsigned color );

unsigned lucDrawRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned lucFillRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned lucBlendRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned lucBlendfillRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned lucDrawPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

unsigned lucFillPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

unsigned lucBlendPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

unsigned lucBlendfillPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

// Canvas blitters
unsigned lucDrawImage( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucDrawImageRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucTransImage( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucTransImageRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucBlendImage( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucBlendImageRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucDrawRLE0( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucDrawRLE0RS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucTransRLE0( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucTransRLE0RS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucBlendRLE0( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucBlendRLE0RS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucDrawMask( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucDrawMaskRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucTransMask( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucTransMaskRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned lucBlendMask( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned lucBlendMaskRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

==============================
= Win32 GDI Canvas Interface =
==============================

#include "lucimpl.h"

typedef struct Win32GdiCanvas {
  size_t structSize; // = sizeof(Win32GdiCanvas)

  ...

  // Canvas primitives
  ...

  // Canvas blitters
  ...

  HBITMAP dibSection;
} Win32GdiCanvas;

unsigned gdiClearCanvas( LucCanvas* canvas, unsigned color );

// Each function to follow will have 8/16/24/32-BPP variations, and nearly
//   each BPP will have an MMX, and SSE optimized variation. Each BPP may
//   also have AVX optimized variations. Since the Win GDI implementation
//   is mostly software based, it will likely share this code with the
//   32-bit MS-DOS port, as well as the Linux software implementation.
// This will be confirmed as development progresses.

// Win32 GDI Canvas primitives
unsigned gdiPixelAt( LucCanvas* canvas, int x, int y );

unsigned gdiDrawPixel( LucCanvas* canvas, int x, int y,
  unsigned color );

unsigned gdiBlendPixel( LucCanvas* canvas, int x, int y,
  unsigned color );

unsigned gdiDrawCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned gdiFillCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned gdiBlendCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned gdiBlendfillCircle( LucCanvas* canvas, int x, int y,
  unsigned radius, unsigned color );

unsigned gdiDrawEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, unsigned vradius, unsigned color );

unsigned gdiFillEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, unsigned vradius, unsigned color );

unsigned gdiBlendEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, int vradius, unsigned color );

unsigned gdiBlendfillEllipse( LucCanvas* canvas, int x, int y,
  unsigned hradius, int vradius, unsigned color );

unsigned gdiDrawRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned gdiFillRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned gdiBlendRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned gdiBlendfillRect( LucCanvas* canvas, int x, int y,
  unsigned width, unsigned height, unsigned color );

unsigned gdiDrawPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

unsigned gdiFillPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

unsigned gdiBlendPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

unsigned gdiBlendfillPoly( LucCanvas* canvas, int x, int y,
  LucPoly* polygon, unsigned color );

// Canvas blitters
unsigned gdiDrawImage( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiDrawImageRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiTransImage( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiTransImageRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiBlendImage( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiBlendImageRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiDrawRLE0( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiDrawRLE0RS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiTransRLE0( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiTransRLE0RS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiBlendRLE0( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiBlendRLE0RS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiDrawMask( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiDrawMaskRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiTransMask( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiTransMaskRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

unsigned gdiBlendMask( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect );

unsigned gdiBlendMaskRS( LucCanvas* canvas, int x, int y,
  LucImage* image, LucRect* imageRect, int rotateBy, int scaleBy );

=================
= I/O Hierarchy =
=================

LucIO
|
-> LucFile = [System]File, LucMappedFile, ...
|
-> LucMemFile = [Optimized]MemFile, ...
|
-> LucDataArchive
|  |
|  -> LucDataFile
|
-> LucVirtualFS
   |
   -> LucVirtualFile

=================
= I/O Interface =
=================

#include "lucimpl.h"

typedef struct LucFileImpl {
  size_t structSize;

  LucIOCurPosFunc curPos;
  LucIOSeekFunc setSeek;
  LucIOReadBlockFunc read;
  LucIOWriteBlockFunc write;

  HANDLE fileHandle;
  fpos_t filePos;
} LucFileImpl;

typedef struct LucIO {
  0,

  LucIOCurPosFunc curPos;
  LucIOSeekFunc setSeek;
  LucIOReadBlockFunc read;
  LucIOWriteBlockFunc write;
} LucIO;

typedef struct LucFile {
  size_t(LucFile); // = sizeof(LucFile)

  LucFilePositionFunc getFilePosition;
  LucSetFilePositionFunc setFilePosition;
  LucReadBlockFunc readBlock;
  LucWriteBlockFunc writeBlock;
} LucFile;

size_t lucFilePosition

======================
= File I/O Interface =
======================

#include "lucimpl.h"

static const LucIO LucFile = {
  0,

  lucFilePosition,
  lucSetFilePosition,
  lucFileRead,
  lucFileWrite
};

static const LucIO LucFileReadOnly = {
  0,

  lucFilePosition,
  lucSetFilePosition,
  lucFileRead,
  lucIONoWrite
};

#include "lucere.h"

LucIO* lucOpenFile( const char* fileName );

LucIO* lucUpdateFile( const char* fileName );

LucIO* lucCreateFile( const char* fileName );

unsigned lucCloseFile( LucIO** filePointer );

========================
= Image File Interface =
========================

#include "lucimpl.h"

typedef struct LucImageReader {
  size_t structSize; // = sizeof(LucImageReader)

  LucReadImageLine1Func readLine1;
  LucReadImageLine8Func readLine8;
  LucReadImageLine16Func readLine16;
  LucReadImageLine24Func readLine24;
  LucReadImageLine32Func readLine32;

  LucIO* fileIO;
} LucImageReader;

#include "lucere.h"

unsigned lucReadLine1( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine8( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine16( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine24( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine32( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

#include "lucere.h"

LucImage* lucLoadImage1( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage8( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage16( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage24( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage32( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

#include "lucere.h"

// Load Lucere format image/mask from file
LucImage* lucLoadRawImage( LucIO* sourceIO, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadRawRLE0( LucIO* sourceIO, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadRawMask( LucIO* sourceIO, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

// Load 32-bit RGBA palette from file
unsigned lucLoadRawPalette( LucIO* sourceIO, LucCanvas* canvas );

// Load external format into Lucere format image/mask
LucImage* lucLoadImage( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadRLE0( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadMask( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

unsigned lucLoadCanvas( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucSurface* lucLoadSurface( LucImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

#include "lucimpl.h"

typedef struct LucImageWriter {
  size_t structSize; // = sizeof(LucImageWriter)

  LucWriteImageLine1Func writeLine1;
  LucWriteImageLine8Func writeLine8;
  LucWriteImageLine16Func writeLine16;
  LucWriteImageLine24Func writeLine24;
  LucWriteImageLine32Func writeLine32;

  LucIO* fileIO;
} LucImageWriter;

#include "lucere.h"

unsigned lucWriteLine1( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucWriteLine8( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucWriteLine16( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucWriteLine24( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucWriteLine32( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

#include "lucere.h"

// Save Lucere format image/mask from file
LucImage* lucSaveRawImage( LucIO* destIO, LucRect* destRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucSaveRawRLE0( LucIO* destIO, LucRect* destRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucSaveRawMask( LucIO* destIO, LucRect* destRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

// Save 32-bit RGBA palette to file
unsigned lucSaveRawPalette( LucIO* destIO, LucCanvas* canvas );

#include "lucere.h"

unsigned lucSaveImage( LucImageWriter* destImage, LucRect* destRect,
  LucImage* image, LucQuantizer* quantizer );

unsigned lucSaveRLE0( LucImageWriter* destImage, LucRect* destRect,
  LucImage* image, LucQuantizer* quantizer );

unsigned lucSaveMask( LucImageWriter* destImage, LucRect* destRect,
  LucImage* image, LucQuantizer* quantizer );

unsigned lucSaveCanvas( LucImageWriter* destImage, LucRect* destRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

unsigned lucSaveSurface( LucImageWriter* destImage, LucRect* destRect,
  LucSurface* surface, LucSurfaceInfo* surfaceInfo,
  LucQuantizer* quantizer );

============================
= PNG Image File Interface =
============================

#include "lucere.h"

typedef struct PngReaderImpl PngReader;

#include "lucimpl.h"

typedef struct PngReaderImpl {
  size_t structSize; // = sizeof(PngReader)

  ... // LucImageReader delegate pointers and data fields

  ... // PNG specific variables
} PngReaderImpl;

#include "lucere.h"

ImageReader* pngOpenImage( LucIO* sourceFile );

ImageReader* pngOpenImageFile( const char* fileName );

unsigned pngCloseImage( LucImageReader** pngReaderPtr );

unsigned pngReadLine1( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngReadLine8( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngReadLine16( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngReadLine24( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngReadLine32( LucImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

#include "lucere.h"

typedef struct PngImageWriterImpl PngImageWriter;

#include "lucimpl.h"

typedef struct PngImageWriterImpl {
  size_t structSize; // = sizeof(PngImageWriter)

  ... // LucImageWriter delegate pointers and data fields

  ... // PNG specific variables
} PngImageWriterImpl;

#include "lucere.h"

unsigned pngWriteLine1( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngWriteLine8( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngWriteLine16( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngWriteLine24( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned pngWriteLine32( LucImageWriter* destImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

===================
= Image Interface =
===================

#include "lucimpl.h"

typedef struct LucImage {
  size_t structSize;
  // = sizeof(LucImage) + paddingSize + dataSize

  size_t paddingSize;
  size_t dataSize;

  unsigned imageFormat;
  unsigned width;
  unsigned height;
  unsigned bpp;
  unsigned rgbaShift;
  unsigned rgbaSize;

  LucReleaseImageFunc releaseImage;
  LucImageSurfaceTypeFunc surfaceType;
  LucImageBeginSurfaceFunc beginSurface;
  LucImageEndSurfaceFunc endSurface;

  // Padding

  // Data
} LucImage;

#include "lucere.h"

unsigned lucImageSurfaceType( LucImage* image );

LucSurface* lucAccessImageSurface( LucImage* image,
  LucSurfaceInfo* destSurfaceInfo );

unsigned lucEndImageSurface( LucSurface** surfacePointer );

unsigned lucImageWidth( LucImage* image );

unsigned lucImageHeight( LucImage* image );

unsigned lucImagePixelFormat( LucImage* image,
  LucPixelFormat* pixelFormat );

=============================
= Win32 GDI Image Interface =
=============================

#include "lucimpl.h"

typedef struct Win32GdiImage {
  size_t structSize;
  // = sizeof(Win32GdiImage) + paddingSize + dataSize

  ... // LucImage delegate pointers and variables

  HBITMAP dibSection;

  // Padding

  // Data
} Win32GdiImage;

unsigned gdiImageSurfaceType( LucImage* image );

LucImage* gdiCreateImage( Canvas* canvas, unsigned width, unsigned height );

unsigned gdiReleaseImage( LucImage** imagePointer );

LucSurface* gdiAccessImageSurface( LucImage* image );

unsigned gdiReleaseImageSurface( LucSurface** surfacePointer );

===================
= World Interface =
===================

========================================
