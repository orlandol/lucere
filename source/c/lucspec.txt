
========================================
= Lucere Design Spec by Orlando Llanes =
= Updated 9/23/23                      =
========================================

Purpose: Provide a stable foundation for games and multimedia software.

Funding: Commercial projects. Consulting. Donations.

License: Always permissive Open Source.

Design goals:
- Follow best practices to achieve commercial quality.
- Provide a conceptual and uniform abstraction.
- Provide a thin layer on top of the operating system and its subsystems.
- Implement various subsystems which can be selected at runtime.
- Provide access to the internals to extend subsystems.
- Provide bridges between dependant subsystems.
- Choose accelerated and optimal subsystems at runtime.
- Check for errors throughout.
- Invert dependencies for dead code elimination.
- Minimize dependencies between unrelated subsystems for modularity.
- Graphics modes where 2D and 3D can coexist.
- Structure source to "just work".
- Design for forward and backward compatibility.

============================
= Windows Graphics Systems =
============================
Software
Win32 GDI
OpenGL 4
OpenGL 3
OpenGL 2
Vulkan
DirectX 12
Direct3D 11
Direct3D 10
Direct3D 9
Direct3D 8
DirectX 7
DirectX 5
WinG

========================
= Mac Graphics Systems =
========================
Software
Metal
OpenGL 4
OpenGL 3
OpenGL 2

==========================
= Linux Graphics Systems =
==========================
Software
Vulkan
OpenGL 4
OpenGL 3
OpenGL 2
Framebuffer
Wayland
Mir(?)
X Windows

===========================
= MS-DOS Graphics Systems =
===========================
Software
VBE 2
VBE 1.2
Mode 13h
EGA
CGA

=========================
= Application Interface =
=========================

#include "lucere.h"

LucApp* lucCreateApp( const char* title, unsigned width, unsigned height,
    unsigned flags, LucEventRouter eventRouter );

unsigned lucReleaseApp( LucApp** appPointer );

unsigned lucExitApp( unsigned returnCode );

unsigned lucRouteEvents( LucApp* app );

unsigned lucWaitForNextEvent( LucApp* app );

======================
= Graphics Hierarchy =
======================

LucApp = [System]App
|
-> LucDisplay = [System]Display1, ..., [System]DisplayN
   |
   -> LucCanvas = [System]Canvas1, ..., [System]CanvasN
      |
      -> LucSurface
      |
      -> LucImage = [System]Image1, ..., [System]ImageN
      |  |
      |  -> LucSurface
      |
      -> LucMask = [System]Mask1, ..., [System]MaskN
         |
         -> LucSurface

======================
= Graphics Interface =
======================

#include "lucimpl.h"

typedef struct LucGraphicsSystem {
  // Display creators and helpers
  LucDisplayCountFunc displayCount;
  LucCreateDisplayFunc createDisplay;

  // Display interface
  LucReleaseDisplayFunc releaseDisplay;
  LucCenterCanvasFunc centerCanvas;
  LucFitCanvasHFunc fitCanvasH;
  LucFitCanvasVFunc fitCanvasV;
  LucStretchCanvasFunc stretchCanvas;

  LucCreateCanvasFunc createCanvas;

  // Canvas interface
  LucReleaseCanvasFunc releaseCanvas;

  // Canvas primitive function selectors
  LucRetrievePixelAtFunc retrievePixelAt;
  LucRetrieveDrawPixelFunc retrieveDrawPixel;
  LucRetrieveBlendPixelFunc retrieveBlendPixel;

  LucRetrieveDrawCircleFunc retrieveDrawCircle;
  LucRetrieveFillCircleFunc retrieveFillCircle;
  LucRetrieveBlendCircleFunc retrieveBlendCircle;

  LucRetrieveDrawEllipseFunc retrieveDrawEllipse;
  LucRetrieveFillEllipseFunc retrieveFillEllipse;
  LucRetrieveBlendEllipseFunc retrieveBlendEllipse;

  LucRetrieveDrawRectFunc retrieveDrawRect;
  LucRetrieveFillRectFunc retrieveFillRect;
  LucRetrieveBlendRectFunc retrieveBlendRect;

  // Canvas primitives
  LucPixelAtFunc pixelAt;
  LucDrawPixelFunc drawPixel;
  LucBlendPixelFunc blendPixel;

  LucDrawCircleFunc drawCircle;
  LucFillCircleFunc fillCircle;
  LucBlendCircleFunc blendCircle;

  LucDrawEllipseFunc drawEllipse;
  LucFillEllipseFunc fillEllipse;
  LucBlendEllipseFunc blendEllipse;

  LucDrawRectFunc drawRect;
  LucFillRectFunc fillRect;
  LucBlendRectFunc blendRect;

  // Canvas blitter function selectors
  LucRetrieveDrawImageFunc retrieveDrawImage;
  LucRetrieveDrawImageHFunc retrieveDrawImageH;
  LucRetrieveDrawImageVFunc retrieveDrawImageV;
  LucRetrieveDrawImageHVFunc retrieveDrawImageHV;
  LucRetrieveDrawImageRSFunc retrieveDrawImageRS;

  LucRetrieveTransImageFunc retrieveTransImage;
  LucRetrieveTransImageHFunc retrieveTransImageH;
  LucRetrieveTransImageVFunc retrieveTransImageV;
  LucRetrieveTransImageHVFunc retrieveTransImageHV;
  LucRetrieveTransImageRSFunc retrieveTransImageRS;

  LucRetrieveBlendImageFunc retrieveBlendImage;
  LucRetrieveBlendImageHFunc retrieveBlendImageH;
  LucRetrieveBlendImageVFunc retrieveBlendImageV;
  LucRetrieveBlendImageHVFunc retrieveBlendImageHV;
  LucRetrieveBlendImageRSFunc retrieveBlendImageRS;

  LucRetrieveDrawRLE0Func retrieveDrawRLE0;
  LucRetrieveDrawRLE0HFunc retrieveDrawRLE0H;
  LucRetrieveDrawRLE0VFunc retrieveDrawRLE0V;
  LucRetrieveDrawRLE0HVFunc retrieveDrawRLE0HV;
  LucRetrieveDrawRLE0RSFunc retrieveDrawRLE0RS;

  LucRetrieveTransRLE0Func retrieveTransRLE0;
  LucRetrieveTransRLE0HFunc retrieveTransRLE0H;
  LucRetrieveTransRLE0VFunc retrieveTransRLE0V;
  LucRetrieveTransRLE0HVFunc retrieveTransRLE0HV;
  LucRetrieveTransRLE0RSFunc retrieveTransRLE0RS;

  LucRetrieveBlendRLE0Func retrieveBlendRLE0;
  LucRetrieveBlendRLE0HFunc retrieveBlendRLE0H;
  LucRetrieveBlendRLE0VFunc retrieveBlendRLE0V;
  LucRetrieveBlendRLE0HVFunc retrieveBlendRLE0HV;
  LucRetrieveBlendRLE0RSFunc retrieveBlendRLE0RS;

  LucRetrieveDrawMaskFunc retrieveDrawMask;
  LucRetrieveDrawMaskHFunc retrieveDrawMaskH;
  LucRetrieveDrawMaskVFunc retrieveDrawMaskV;
  LucRetrieveDrawMaskHVFunc retrieveDrawMaskHV;
  LucRetrieveDrawMaskRSFunc retrieveDrawMaskRS;

  LucRetrieveTransMaskFunc retrieveTransMask;
  LucRetrieveTransMaskHFunc retrieveTransMaskH;
  LucRetrieveTransMaskVFunc retrieveTransMaskV;
  LucRetrieveTransMaskHVFunc retrieveTransMaskHV;
  LucRetrieveTransMaskRSFunc retrieveTransMaskRS;

  LucRetrieveBlendMaskFunc retrieveBlendMask;
  LucRetrieveBlendMaskHFunc retrieveBlendMaskH;
  LucRetrieveBlendMaskVFunc retrieveBlendMaskV;
  LucRetrieveBlendMaskHVFunc retrieveBlendMaskHV;
  LucRetrieveBlendMaskRSFunc retrieveBlendMaskRS;

  // Canvas blitters

  // Surface interface
  LucCanvasSurfaceTypeFunc canvasSurfaceType;
  LucBeginSurfaceFunc beginSurface;
  LucEndSurfaceFunc endSurface;
} LucGraphicsSystem;

=====================
= Display Interface =
=====================

#include "lucere.h"

typedef struct LucDisplay {
  // Base header
  size_t structSize;

  LucReleaseDisplayFunc releaseDisplay;
  LucCenterCanvasFunc centerCanvas;
  LucFitCanvasHFunc fitCanvasH;
  LucFitCanvasVFunc fitCanvasV;
  LucStretchCanvasFunc stretchCanvas;
} LucDisplay;

unsigned lucDisplayCount( LucApp* app );

LucDisplay* lucCreateDisplay( LucApp* app,
  unsigned monitorIndex, LucGraphicsSystem* graphics );

unsigned lucReleaseDisplay( LucDisplay** displayPtr );

unsigned lucCenterCanvas( LucDisplay* display, LucCanvas* canvas );

unsigned lucFitCanvasH( LucDisplay* display, LucCanvas* canvas );

unsigned lucFitCanvasV( LucDisplay* display, LucCanvas* canvas );

unsigned lucStretchCanvas( LucDisplay* display, LucCanvas* canvas );

===============================
= Win32 GDI Display Interface =
===============================

#include "lucimpl.h"

const LucDisplay Win32Display = {
  // Base header
  sizeof(HBITMAP),

  gdiReleaseDisplay,
  gdiCenterCanvas,
  gdiFitCanvasH,
  gdiFitCanvasV,
  gdiStretchCanvas

  // Win32 extensions
  HBITMAP dibSection,
};

unsigned gdiDisplayCount( LucApp* app );

LucDisplay* gdiCreateDisplay( LucApp* app, unsigned monitorIndex,
  LucGraphicsInterface* graphicsSystem );

unsigned gdiReleaseDisplay( LucDisplay** displayPtr );

unsigned gdiReleaseDisplay( LucDisplay** displayPtr );

unsigned gdiCenterCanvas( LucDisplay* display, LucCanvas* canvas );

unsigned gdiFitCanvasH( LucDisplay* display, LucCanvas* canvas );

unsigned gdiFitCanvasV( LucDisplay* display, LucCanvas* canvas );

unsigned gdiStretchCanvas( LucDisplay* display, LucCanvas* canvas );

=================
= I/O Hierarchy =
=================

LucIO
|
-> LucFile = [System]File, LucMappedFile, ...
|
-> LucMemFile = [Optimized]MemFile, ...
|
-> LucDataArchive
|  |
|  -> LucDataFile
|
-> LucVirtualFS
   |
   -> LucVirtualFile

=================
= I/O Interface =
=================

#include "lucimpl.h"

typedef struct LucFileImpl {
  size_t structSize;

  LucIOCurPosFunc curPos;
  LucIOSeekFunc setSeek;
  LucIOReadBlockFunc read;
  LucIOWriteBlockFunc write;

  HANDLE fileHandle;
  fpos_t filePos;
} LucFileImpl;

typedef struct LucIO {
  0,

  LucIOCurPosFunc curPos;
  LucIOSeekFunc setSeek;
  LucIOReadBlockFunc read;
  LucIOWriteBlockFunc write;
} LucIO;

typedef struct LucFile {
  0,

  LucFilePositionFunc getFilePosition;
  LucSetFilePositionFunc setFilePosition;
  LucReadBlockFunc read;
} LucFile;

size_t lucFilePosition

======================
= File I/O Interface =
======================

#include "lucimpl.h"

static const LucIO LucFile = {
  0,

  lucFilePosition,
  lucSetFilePosition,
  lucFileRead,
  lucFileWrite
};

static const LucIO LucFileReadOnly = {
  0,

  lucFilePosition,
  lucSetFilePosition,
  lucFileRead,
  lucIONoWrite
};

#include "lucere.h"

LucIO* lucOpenFile( const char* fileName );

LucIO* lucUpdateFile( const char* fileName );

LucIO* lucCreateFile( const char* fileName );

unsigned lucCloseFile( LucIO** filePointer );

========================
= Image File Interface =
========================

#include "lucimpl.h"

typedef struct ImageReader {
  sizeof(LucIO),

  LucReadImageLine1Func readLine1;
  LucReadImageLine8Func readLine8;
  LucReadImageLine16Func readLine16;
  LucReadImageLine24Func readLine24;
  LucReadImageLine32Func readLine32;

  LucIO* fileIO;
} ImageReader;

#include "lucere.h"

unsigned lucReadLine1( ImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine8( ImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine16( ImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine24( ImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

unsigned lucReadLine32( ImageReader* sourceImage, uint8* pixelBuffer,
  LucPixelFormat* pixelFormat, size_t pixelOffset, size_t pixelCount,
  LucQuantizer* quantizer );

LucImage* lucLoadImage1( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage8( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage16( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage24( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadImage32( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

#include "lucere.h"

// Load Lucere format image/mask from file
LucImage* lucLoadRawImage( LucIO* sourceIO, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadRawRLE0( LucIO* sourceIO, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadRawMask( LucIO* sourceIO, LucRect* sourceRect,
  unsigned colorBit0, unsigned colorBit1,
  LucCanvas* canvas, LucQuantizer* quantizer );

// Load 32-bit RGBA palette from file
unsigned lucLoadRawPalette( LucIO* sourceIO, LucCanvas* canvas );

// Load external format into Lucere format image/mask
LucImage* lucLoadImage( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadRLE0( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucImage* lucLoadMask( ImageReader* sourceImage, LucRect* sourceRect,
  unsigned colorBit0, unsigned colorBit1,
  LucCanvas* canvas, LucQuantizer* quantizer );

unsigned lucLoadCanvas( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

LucSurface* lucLoadSurface( ImageReader* sourceImage, LucRect* sourceRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

#include "lucimpl.h"

typedef struct ImageWriter {
  LucIO* io;

  LucWriteImageLine1Func writeLine1;
  LucWriteImageLine8Func writeLine8;
  LucWriteImageLine16Func writeLine16;
  LucWriteImageLine24Func writeLine24;
  LucWriteImageLine32Func writeLine32;
} ImageWriter;

unsigned lucWriteImageLine1( ImageWriter* destImage,

#include "lucere.h"

unsigned lucSaveImage( ImageWriter* destImage, LucRect* destRect,
  LucImage* image, LucQuantizer* quantizer );

unsigned lucSaveRLE0( ImageWriter* destImage, LucRect* destRect,
  LucImage* image, LucQuantizer* quantizer );

unsigned lucSaveMask( ImageWriter* destImage, LucRect* destRect,
  LucImage* image, unsigned bitClearColor, unsigned bitSetColor,
  LucQuantizer* quantizer );

unsigned lucSaveCanvas( ImageWriter* destImage, LucRect* destRect,
  LucCanvas* canvas, LucQuantizer* quantizer );

unsigned lucSaveSurface( ImageWriter* destImage, LucRect* destRect,
  LucSurface* surface, LucSurfaceInfo* surfaceInfo,
  LucQuantizer* quantizer );

============================
= PNG Image File Interface =
============================

#include "lucere.h"

const ImageReader PngReader = {
  NULL,

  pngReadLine1,
  pngReadLine8,
  pngReadLine16,
  pngReadLine24,
  pngReadLine32
};

ImageReader* pngOpenImage( LucIO* sourceFile );

ImageReader* pngOpenImageFile( const char* fileName );

unsigned pngCloseImage( LucImageReader** pngReaderPtr );

===================
= Image Interface =
===================

#include "lucere.h"

===================
= World Interface =
===================

#include "lucere.h"

========================================
